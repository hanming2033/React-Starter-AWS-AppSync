// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ForgotPassword /> Main Suite snapshot on default state : request code 1`] = `
<div>
  <React.Fragment>
    <h1>
      Forgot Password
    </h1>
    <Formik
      enableReinitialize={false}
      initialValues={
        Object {
          "email": "",
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      render={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      validationSchema={
        ObjectSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_defaultDefault": [Function],
          "_deps": Array [],
          "_excludedEdges": Array [],
          "_exclusive": Object {},
          "_mutate": false,
          "_nodes": Array [
            "email",
          ],
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "object",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "fields": Object {
            "email": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "required": false,
                "undefined": false,
              },
              "_mutate": false,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "tests": Array [
                [Function],
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        }
      }
    />
    <button
      onClick={[Function]}
    >
      Back to Sign In
    </button>
  </React.Fragment>
</div>
`;

exports[`<ForgotPassword /> Main Suite snapshot on default state : reset code 1`] = `
<div>
  <React.Fragment>
    <h1>
      Forgot Password
    </h1>
    <Formik
      enableReinitialize={false}
      initialValues={
        Object {
          "code": "",
          "confirmPassword": "",
          "email": "",
          "password": "",
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      render={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      validationSchema={
        ObjectSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_defaultDefault": [Function],
          "_deps": Array [],
          "_excludedEdges": Array [],
          "_exclusive": Object {},
          "_mutate": false,
          "_nodes": Array [
            "confirmPassword",
            "password",
            "code",
            "email",
          ],
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "object",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "fields": Object {
            "code": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "required": false,
              },
              "_mutate": false,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "tests": Array [
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
            "confirmPassword": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "required": false,
              },
              "_mutate": false,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {
                  null,
                },
                "refs": Map {
                  "password" => Reference {
                    "_get": [Function],
                    "isContext": false,
                    "isSelf": false,
                    "key": "password",
                    "map": [Function],
                    "path": "password",
                    "prefix": "$",
                  },
                },
              },
              "_whitelistError": [Function],
              "tests": Array [
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
            "email": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "required": false,
                "undefined": false,
              },
              "_mutate": false,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "tests": Array [
                [Function],
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
            "password": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "required": false,
              },
              "_mutate": false,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "tests": Array [
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        }
      }
    />
    <button
      onClick={[Function]}
    >
      Back to Sign In
    </button>
  </React.Fragment>
</div>
`;

exports[`<ForgotPassword /> Main Suite snapshot on error state 1`] = `
<h1>
  Error!!
</h1>
`;

exports[`<ForgotPassword /> Main Suite snapshot on loading state 1`] = `
<h1>
  Loading...
</h1>
`;

exports[`<FormikRequestCode /> Main Suite Email Input Suite Static/Conditional Rendering snapshot on qryRes has email:"a@b.c" as email input 1`] = `
<input
  name="email"
  onBlur={[Function]}
  onChange={[Function]}
  placeholder="Email"
  value="a@b.c"
/>
`;

exports[`<FormikRequestCode /> Main Suite snapshot on default state 1`] = `
<Formik
  enableReinitialize={false}
  initialValues={
    Object {
      "email": "",
    }
  }
  isInitialValid={false}
  onSubmit={[Function]}
  render={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": false,
      "_nodes": Array [
        "email",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "email": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": false,
            "undefined": false,
          },
          "_mutate": false,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
>
  <Form>
    <Component
      formik={
        Object {
          "dirty": false,
          "errors": Object {},
          "handleBlur": [Function],
          "handleChange": [Function],
          "handleReset": [Function],
          "handleSubmit": [Function],
          "initialValues": Object {
            "email": "",
          },
          "isSubmitting": false,
          "isValid": false,
          "isValidating": false,
          "registerField": [Function],
          "resetForm": [Function],
          "setError": [Function],
          "setErrors": [Function],
          "setFieldError": [Function],
          "setFieldTouched": [Function],
          "setFieldValue": [Function],
          "setFormikState": [Function],
          "setStatus": [Function],
          "setSubmitting": [Function],
          "setTouched": [Function],
          "setValues": [Function],
          "submitCount": 0,
          "submitForm": [Function],
          "touched": Object {},
          "unregisterField": [Function],
          "validate": undefined,
          "validateField": [Function],
          "validateForm": [Function],
          "validateOnBlur": true,
          "validateOnChange": true,
          "validationSchema": ObjectSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_defaultDefault": [Function],
            "_deps": Array [],
            "_excludedEdges": Array [],
            "_exclusive": Object {},
            "_mutate": false,
            "_nodes": Array [
              "email",
            ],
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "object",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "fields": Object {
              "email": StringSchema {
                "_blacklist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_conditions": Array [],
                "_deps": Array [],
                "_exclusive": Object {
                  "required": false,
                  "undefined": false,
                },
                "_mutate": false,
                "_options": Object {
                  "abortEarly": true,
                  "recursive": true,
                },
                "_type": "string",
                "_typeError": [Function],
                "_whitelist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "tests": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                ],
              },
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
          },
          "values": Object {
            "email": "",
          },
        }
      }
    >
      <form
        onSubmit={[Function]}
      >
        <C
          name="email"
          placeholder="Email"
        >
          <FieldInner
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "email": "",
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": ObjectSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_defaultDefault": [Function],
                  "_deps": Array [],
                  "_excludedEdges": Array [],
                  "_exclusive": Object {},
                  "_mutate": false,
                  "_nodes": Array [
                    "email",
                  ],
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "object",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "fields": Object {
                    "email": StringSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_deps": Array [],
                      "_exclusive": Object {
                        "required": false,
                        "undefined": false,
                      },
                      "_mutate": false,
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "string",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                    },
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                },
                "values": Object {
                  "email": "",
                },
              }
            }
            name="email"
            placeholder="Email"
          >
            <input
              name="email"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="Email"
              value=""
            />
          </FieldInner>
        </C>
        <span />
        <br />
        <button
          disabled={false}
        >
          Send Code
        </button>
      </form>
    </Component>
  </Form>
</Formik>
`;
